export abstract class IMessage {
  abstract id: string;
  abstract isStreaming: boolean;
  abstract createdAt: Date;
}

export type IRole = "system" | "user" | "assistant";

interface TextMessageParams {
  id: string;
  isStreaming: boolean;
  role: IRole;
  content: string;
  createdAt: Date;
}

export class TextMessage extends IMessage {
  id: string;
  isStreaming: boolean;
  role: IRole;
  content: string;
  createdAt: Date;

  constructor(params: TextMessageParams) {
    super();
    this.id = params.id;
    this.isStreaming = params.isStreaming;
    this.role = params.role;
    this.content = params.content;
    this.createdAt = params.createdAt;
  }
}

interface ActionExecutionMessageParams {
  id: string;
  isStreaming: boolean;
  name: string;
  arguments: string;
  scope: "client" | "server";
  createdAt: Date;
}

export class ActionExecutionMessage extends IMessage {
  id: string;
  isStreaming: boolean;
  name: string;
  arguments: any;
  scope: "client" | "server";
  createdAt: Date;

  constructor(params: ActionExecutionMessageParams) {
    super();
    this.id = params.id;
    this.isStreaming = params.isStreaming;
    this.name = params.name;
    this.arguments = params.arguments;
    this.scope = params.scope;
    this.createdAt = params.createdAt;
  }
}

interface ResultMessageParams {
  id: string;
  isStreaming: boolean;
  actionExecutionId: string;
  result: string;
  createdAt: Date;
}

export class ResultMessage extends IMessage {
  id: string;
  isStreaming: boolean;
  actionExecutionId: string;
  result: string;
  createdAt: Date;

  constructor(params: ResultMessageParams) {
    super();
    this.id = params.id;
    this.isStreaming = params.isStreaming;
    this.actionExecutionId = params.actionExecutionId;
    this.result = params.result;
    this.createdAt = params.createdAt;
  }

  static encodeResult(result: any): string {
    if (result === undefined) {
      return "";
    } else if (typeof result === "string") {
      return result;
    } else {
      return JSON.stringify(result);
    }
  }
}

export type Role = "system" | "user" | "assistant" | "function";

export interface FunctionCall {
  /**
   * The arguments to call the function with, as generated by the model in JSON
   * format. Note that the model does not always generate valid JSON, and may
   * hallucinate parameters not defined by your function schema. Validate the
   * arguments in your code before calling your function.
   */
  arguments?: string;

  /**
   * The name of the function to call.
   */
  name?: string;

  /**
   * Temporarily add scope to the function call.
   */
  scope?: "client" | "server";
}

/**
 * Shared types between the API and UI packages.
 */
export interface Message {
  id: string;
  createdAt?: Date;
  content: string;
  ui?: string | null | undefined;
  role: Role;
  /**
   * If the message has a role of `function`, the `name` field is the name of the function.
   * Otherwise, the name field should not be set.
   */
  name?: string;
  /**
   * If the assistant role makes a function call, the `function_call` field
   * contains the function call name and arguments. Otherwise, the field should
   * not be set.
   */
  function_call?: FunctionCall;

  /**
   * Partial function call contains the function call name and arguments as they are
   * streamed from the model. This is used to display the function call in the UI.
   */
  partialFunctionCall?: FunctionCall;
}

export interface FunctionDefinition {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain
   * underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The parameters the functions accepts, described as a JSON Schema object. See the
   * [guide](/docs/guides/gpt/function-calling) for examples, and the
   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
   * documentation about the format.
   *
   * To describe a function that accepts no parameters, provide the value
   * `{"type": "object", "properties": {}}`.
   */
  parameters: Record<string, unknown>;
  /**
   * A description of what the function does, used by the model to choose when and
   * how to call the function.
   */
  description?: string;
}

export interface ToolDefinition {
  type: "function";
  function: FunctionDefinition;
}

export interface FunctionCallHandlerArguments {
  messages: IMessage[];
  name?: string;
  args?: string;
}

export type FunctionCallHandler = (args: FunctionCallHandlerArguments) => Promise<any>;

export type AssistantMessage = {
  id: string;
  role: "assistant";
  content: Array<{
    type: "text";
    text: {
      value: string;
    };
  }>;
};

export type JSONValue =
  | null
  | string
  | number
  | boolean
  | { [x: string]: JSONValue }
  | Array<JSONValue>;
